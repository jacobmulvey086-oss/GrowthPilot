// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.5.0 (commit ).

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ClientCache as __ClientCache,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
} from "spacetimedb";

// Import and reexport all reducer arg types
import { AuthenticateUser } from "./authenticate_user_reducer";
export { AuthenticateUser };
import { CheckIn } from "./check_in_reducer";
export { CheckIn };
import { CreateUser } from "./create_user_reducer";
export { CreateUser };
import { GetUserData } from "./get_user_data_reducer";
export { GetUserData };
import { SaveProgress } from "./save_progress_reducer";
export { SaveProgress };
import { UpdateSubscription } from "./update_subscription_reducer";
export { UpdateSubscription };
import { UpdateUserSelections } from "./update_user_selections_reducer";
export { UpdateUserSelections };

// Import and reexport all table handle types
import { StreakTableHandle } from "./streak_table";
export { StreakTableHandle };
import { UserTableHandle } from "./user_table";
export { UserTableHandle };
import { UserProgressTableHandle } from "./user_progress_table";
export { UserProgressTableHandle };

// Import and reexport all types
import { Streak } from "./streak_type";
export { Streak };
import { User } from "./user_type";
export { User };
import { UserProgress } from "./user_progress_type";
export { UserProgress };

const REMOTE_MODULE = {
  tables: {
    streak: {
      tableName: "streak",
      rowType: Streak.getTypeScriptAlgebraicType(),
      primaryKey: "email",
      primaryKeyInfo: {
        colName: "email",
        colType: (Streak.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    user: {
      tableName: "user",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "email",
      primaryKeyInfo: {
        colName: "email",
        colType: (User.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    user_progress: {
      tableName: "user_progress",
      rowType: UserProgress.getTypeScriptAlgebraicType(),
      primaryKey: "email",
      primaryKeyInfo: {
        colName: "email",
        colType: (UserProgress.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    authenticate_user: {
      reducerName: "authenticate_user",
      argsType: AuthenticateUser.getTypeScriptAlgebraicType(),
    },
    check_in: {
      reducerName: "check_in",
      argsType: CheckIn.getTypeScriptAlgebraicType(),
    },
    create_user: {
      reducerName: "create_user",
      argsType: CreateUser.getTypeScriptAlgebraicType(),
    },
    get_user_data: {
      reducerName: "get_user_data",
      argsType: GetUserData.getTypeScriptAlgebraicType(),
    },
    save_progress: {
      reducerName: "save_progress",
      argsType: SaveProgress.getTypeScriptAlgebraicType(),
    },
    update_subscription: {
      reducerName: "update_subscription",
      argsType: UpdateSubscription.getTypeScriptAlgebraicType(),
    },
    update_user_selections: {
      reducerName: "update_user_selections",
      argsType: UpdateUserSelections.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.5.0",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: __DbConnectionImpl, event: __Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: __DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: __DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AuthenticateUser", args: AuthenticateUser }
| { name: "CheckIn", args: CheckIn }
| { name: "CreateUser", args: CreateUser }
| { name: "GetUserData", args: GetUserData }
| { name: "SaveProgress", args: SaveProgress }
| { name: "UpdateSubscription", args: UpdateSubscription }
| { name: "UpdateUserSelections", args: UpdateUserSelections }
;

export class RemoteReducers {
  constructor(private connection: __DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  authenticateUser(email: string, passwordHash: string) {
    const __args = { email, passwordHash };
    let __writer = new __BinaryWriter(1024);
    AuthenticateUser.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("authenticate_user", __argsBuffer, this.setCallReducerFlags.authenticateUserFlags);
  }

  onAuthenticateUser(callback: (ctx: ReducerEventContext, email: string, passwordHash: string) => void) {
    this.connection.onReducer("authenticate_user", callback);
  }

  removeOnAuthenticateUser(callback: (ctx: ReducerEventContext, email: string, passwordHash: string) => void) {
    this.connection.offReducer("authenticate_user", callback);
  }

  checkIn(email: string) {
    const __args = { email };
    let __writer = new __BinaryWriter(1024);
    CheckIn.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("check_in", __argsBuffer, this.setCallReducerFlags.checkInFlags);
  }

  onCheckIn(callback: (ctx: ReducerEventContext, email: string) => void) {
    this.connection.onReducer("check_in", callback);
  }

  removeOnCheckIn(callback: (ctx: ReducerEventContext, email: string) => void) {
    this.connection.offReducer("check_in", callback);
  }

  createUser(email: string, passwordHash: string) {
    const __args = { email, passwordHash };
    let __writer = new __BinaryWriter(1024);
    CreateUser.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("create_user", __argsBuffer, this.setCallReducerFlags.createUserFlags);
  }

  onCreateUser(callback: (ctx: ReducerEventContext, email: string, passwordHash: string) => void) {
    this.connection.onReducer("create_user", callback);
  }

  removeOnCreateUser(callback: (ctx: ReducerEventContext, email: string, passwordHash: string) => void) {
    this.connection.offReducer("create_user", callback);
  }

  getUserData(email: string) {
    const __args = { email };
    let __writer = new __BinaryWriter(1024);
    GetUserData.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("get_user_data", __argsBuffer, this.setCallReducerFlags.getUserDataFlags);
  }

  onGetUserData(callback: (ctx: ReducerEventContext, email: string) => void) {
    this.connection.onReducer("get_user_data", callback);
  }

  removeOnGetUserData(callback: (ctx: ReducerEventContext, email: string) => void) {
    this.connection.offReducer("get_user_data", callback);
  }

  saveProgress(email: string, completedTasks: number[]) {
    const __args = { email, completedTasks };
    let __writer = new __BinaryWriter(1024);
    SaveProgress.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("save_progress", __argsBuffer, this.setCallReducerFlags.saveProgressFlags);
  }

  onSaveProgress(callback: (ctx: ReducerEventContext, email: string, completedTasks: number[]) => void) {
    this.connection.onReducer("save_progress", callback);
  }

  removeOnSaveProgress(callback: (ctx: ReducerEventContext, email: string, completedTasks: number[]) => void) {
    this.connection.offReducer("save_progress", callback);
  }

  updateSubscription(email: string, isPro: boolean) {
    const __args = { email, isPro };
    let __writer = new __BinaryWriter(1024);
    UpdateSubscription.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_subscription", __argsBuffer, this.setCallReducerFlags.updateSubscriptionFlags);
  }

  onUpdateSubscription(callback: (ctx: ReducerEventContext, email: string, isPro: boolean) => void) {
    this.connection.onReducer("update_subscription", callback);
  }

  removeOnUpdateSubscription(callback: (ctx: ReducerEventContext, email: string, isPro: boolean) => void) {
    this.connection.offReducer("update_subscription", callback);
  }

  updateUserSelections(email: string, currentGoal: string, niche: string) {
    const __args = { email, currentGoal, niche };
    let __writer = new __BinaryWriter(1024);
    UpdateUserSelections.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_user_selections", __argsBuffer, this.setCallReducerFlags.updateUserSelectionsFlags);
  }

  onUpdateUserSelections(callback: (ctx: ReducerEventContext, email: string, currentGoal: string, niche: string) => void) {
    this.connection.onReducer("update_user_selections", callback);
  }

  removeOnUpdateUserSelections(callback: (ctx: ReducerEventContext, email: string, currentGoal: string, niche: string) => void) {
    this.connection.offReducer("update_user_selections", callback);
  }

}

export class SetReducerFlags {
  authenticateUserFlags: __CallReducerFlags = 'FullUpdate';
  authenticateUser(flags: __CallReducerFlags) {
    this.authenticateUserFlags = flags;
  }

  checkInFlags: __CallReducerFlags = 'FullUpdate';
  checkIn(flags: __CallReducerFlags) {
    this.checkInFlags = flags;
  }

  createUserFlags: __CallReducerFlags = 'FullUpdate';
  createUser(flags: __CallReducerFlags) {
    this.createUserFlags = flags;
  }

  getUserDataFlags: __CallReducerFlags = 'FullUpdate';
  getUserData(flags: __CallReducerFlags) {
    this.getUserDataFlags = flags;
  }

  saveProgressFlags: __CallReducerFlags = 'FullUpdate';
  saveProgress(flags: __CallReducerFlags) {
    this.saveProgressFlags = flags;
  }

  updateSubscriptionFlags: __CallReducerFlags = 'FullUpdate';
  updateSubscription(flags: __CallReducerFlags) {
    this.updateSubscriptionFlags = flags;
  }

  updateUserSelectionsFlags: __CallReducerFlags = 'FullUpdate';
  updateUserSelections(flags: __CallReducerFlags) {
    this.updateUserSelectionsFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: __DbConnectionImpl) {}

  get streak(): StreakTableHandle {
    // clientCache is a private property
    return new StreakTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Streak>(REMOTE_MODULE.tables.streak));
  }

  get user(): UserTableHandle {
    // clientCache is a private property
    return new UserTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user));
  }

  get userProgress(): UserProgressTableHandle {
    // clientCache is a private property
    return new UserProgressTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<UserProgress>(REMOTE_MODULE.tables.user_progress));
  }
}

export class SubscriptionBuilder extends __SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends __DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): __DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new __DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: __DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = __EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = __ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = __SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = __ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
